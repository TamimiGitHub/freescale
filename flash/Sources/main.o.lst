   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.main,"ax",%progbits
  18              		.align	2
  19              		.global	main
  20              		.code	16
  21              		.thumb_func
  23              	main:
  24              	.LFB0:
  25              		.file 1 "../sources/main.c"
   1:../sources/main.c **** #include "derivative.h" /* include peripheral declarations */
   2:../sources/main.c **** #include "TFC\TFC.h"
   3:../sources/main.c **** 
   4:../sources/main.c **** int main(void)
   5:../sources/main.c **** {
  26              		.loc 1 5 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 D0B0     		sub	sp, sp, #320
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 328
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
   6:../sources/main.c **** 	uint32_t i=0;
  39              		.loc 1 6 0
  40 0006 0023     		mov	r3, #0
  41 0008 9420     		mov	r0, #148
  42 000a 4000     		lsl	r0, r0, #1
  43 000c C019     		add	r0, r0, r7
  44 000e 0360     		str	r3, [r0]
   7:../sources/main.c **** 	//LineScanImage0;
   8:../sources/main.c **** 	int ii=0;
  45              		.loc 1 8 0
  46 0010 0023     		mov	r3, #0
  47 0012 9E21     		mov	r1, #158
  48 0014 4900     		lsl	r1, r1, #1
  49 0016 C919     		add	r1, r1, r7
  50 0018 0B60     		str	r3, [r1]
   9:../sources/main.c **** 	int deltaL, deltaR;
  10:../sources/main.c **** 	int firstLevel, secondLevel;
  11:../sources/main.c **** 	int steeringAngle;
  12:../sources/main.c **** 	int samplenum = 4;
  51              		.loc 1 12 0
  52 001a 0423     		mov	r3, #4
  53 001c 9222     		mov	r2, #146
  54 001e 5200     		lsl	r2, r2, #1
  55 0020 D219     		add	r2, r2, r7
  56 0022 1360     		str	r3, [r2]
  13:../sources/main.c **** 	int threshold=50*samplenum;
  57              		.loc 1 13 0
  58 0024 9220     		mov	r0, #146
  59 0026 4000     		lsl	r0, r0, #1
  60 0028 C019     		add	r0, r0, r7
  61 002a 0368     		ldr	r3, [r0]
  62 002c 3222     		mov	r2, #50
  63 002e 5343     		mul	r3, r2
  64 0030 9021     		mov	r1, #144
  65 0032 4900     		lsl	r1, r1, #1
  66 0034 C919     		add	r1, r1, r7
  67 0036 0B60     		str	r3, [r1]
  14:../sources/main.c **** 	int smallthreshold=50*samplenum;
  68              		.loc 1 14 0
  69 0038 9222     		mov	r2, #146
  70 003a 5200     		lsl	r2, r2, #1
  71 003c D219     		add	r2, r2, r7
  72 003e 1368     		ldr	r3, [r2]
  73 0040 3222     		mov	r2, #50
  74 0042 5343     		mul	r3, r2
  75 0044 8E20     		mov	r0, #142
  76 0046 4000     		lsl	r0, r0, #1
  77 0048 C019     		add	r0, r0, r7
  78 004a 0360     		str	r3, [r0]
  15:../sources/main.c **** 	TFC_Init();
  79              		.loc 1 15 0
  80 004c FFF7FEFF 		bl	TFC_Init
  16:../sources/main.c **** 	TFC_HBRIDGE_ENABLE;
  81              		.loc 1 16 0
  82 0050 BC4B     		ldr	r3, .L28
  83 0052 8022     		mov	r2, #128
  84 0054 9203     		lsl	r2, r2, #14
  85 0056 5A60     		str	r2, [r3, #4]
  17:../sources/main.c **** 	TFC_SetMotorPWM(0.2,0.2);
  86              		.loc 1 17 0
  87 0058 BB4A     		ldr	r2, .L28+4
  88 005a BB4B     		ldr	r3, .L28+4
  89 005c 101C     		add	r0, r2, #0
  90 005e 191C     		add	r1, r3, #0
  91 0060 FFF7FEFF 		bl	TFC_SetMotorPWM
  92              	.L27:
  18:../sources/main.c **** 	
  19:../sources/main.c **** 	
  20:../sources/main.c **** 	for(;;)
  21:../sources/main.c **** 	{	   
  22:../sources/main.c **** 		//TFC_Task must be called in your main loop.  This keeps certain processing happy (I.E. Serial po
  23:../sources/main.c **** 			TFC_Task();
  93              		.loc 1 23 0
  94 0064 FFF7FEFF 		bl	TFC_Task
  24:../sources/main.c **** 
  25:../sources/main.c **** 			//This Demo program will look at the middle 2 switch to select one of 4 demo modes.
  26:../sources/main.c **** 			//Let's look at the middle 2 switches
  27:../sources/main.c **** 			switch((TFC_GetDIP_Switch()>>1)&0x03)
  95              		.loc 1 27 0
  96 0068 FFF7FEFF 		bl	TFC_GetDIP_Switch
  97              	.LBB2:
  28:../sources/main.c **** 			{
  29:../sources/main.c **** 			default:
  30:../sources/main.c **** 				ii=0;
  98              		.loc 1 30 0
  99 006c 0023     		mov	r3, #0
 100 006e 9E21     		mov	r1, #158
 101 0070 4900     		lsl	r1, r1, #1
 102 0072 C919     		add	r1, r1, r7
 103 0074 0B60     		str	r3, [r1]
  31:../sources/main.c **** 				
  32:../sources/main.c **** 				uint16_t  WorkingImage[128]={0};
 104              		.loc 1 32 0
 105 0076 B54B     		ldr	r3, .L28+8
 106 0078 A022     		mov	r2, #160
 107 007a 5200     		lsl	r2, r2, #1
 108 007c D219     		add	r2, r2, r7
 109 007e D318     		add	r3, r2, r3
 110 0080 1A1C     		mov	r2, r3
 111 0082 8023     		mov	r3, #128
 112 0084 5B00     		lsl	r3, r3, #1
 113 0086 101C     		mov	r0, r2
 114 0088 0021     		mov	r1, #0
 115 008a 1A1C     		mov	r2, r3
 116 008c FFF7FEFF 		bl	memset
  33:../sources/main.c **** 				int sample = 0;
 117              		.loc 1 33 0
 118 0090 0023     		mov	r3, #0
 119 0092 9820     		mov	r0, #152
 120 0094 4000     		lsl	r0, r0, #1
 121 0096 C019     		add	r0, r0, r7
 122 0098 0360     		str	r3, [r0]
  34:../sources/main.c **** 				for(;sample<3;){
 123              		.loc 1 34 0
 124 009a 37E0     		b	.L2
 125              	.L5:
  35:../sources/main.c **** 					if(LineScanImageReady){
 126              		.loc 1 35 0
 127 009c AC4B     		ldr	r3, .L28+12
 128 009e 1B78     		ldrb	r3, [r3]
 129 00a0 DBB2     		uxtb	r3, r3
 130 00a2 002B     		cmp	r3, #0
 131 00a4 32D0     		beq	.L2
 132              	.LBB3:
  36:../sources/main.c **** 						int j=0;
 133              		.loc 1 36 0
 134 00a6 0023     		mov	r3, #0
 135 00a8 9621     		mov	r1, #150
 136 00aa 4900     		lsl	r1, r1, #1
 137 00ac C919     		add	r1, r1, r7
 138 00ae 0B60     		str	r3, [r1]
  37:../sources/main.c **** 						for(;j<128;j++) WorkingImage[j]=LineScanImage0[j];
 139              		.loc 1 37 0
 140 00b0 1DE0     		b	.L3
 141              	.L4:
 142              		.loc 1 37 0 is_stmt 0
 143 00b2 A84B     		ldr	r3, .L28+16
 144 00b4 1A68     		ldr	r2, [r3]
 145 00b6 9620     		mov	r0, #150
 146 00b8 4000     		lsl	r0, r0, #1
 147 00ba C019     		add	r0, r0, r7
 148 00bc 0368     		ldr	r3, [r0]
 149 00be 5B00     		lsl	r3, r3, #1
 150 00c0 D318     		add	r3, r2, r3
 151 00c2 1B88     		ldrh	r3, [r3]
 152 00c4 99B2     		uxth	r1, r3
 153 00c6 A14B     		ldr	r3, .L28+8
 154 00c8 A022     		mov	r2, #160
 155 00ca 5200     		lsl	r2, r2, #1
 156 00cc D219     		add	r2, r2, r7
 157 00ce D318     		add	r3, r2, r3
 158 00d0 9620     		mov	r0, #150
 159 00d2 4000     		lsl	r0, r0, #1
 160 00d4 C019     		add	r0, r0, r7
 161 00d6 0268     		ldr	r2, [r0]
 162 00d8 5200     		lsl	r2, r2, #1
 163 00da D152     		strh	r1, [r2, r3]
 164 00dc 9621     		mov	r1, #150
 165 00de 4900     		lsl	r1, r1, #1
 166 00e0 C919     		add	r1, r1, r7
 167 00e2 0B68     		ldr	r3, [r1]
 168 00e4 0133     		add	r3, r3, #1
 169 00e6 9622     		mov	r2, #150
 170 00e8 5200     		lsl	r2, r2, #1
 171 00ea D219     		add	r2, r2, r7
 172 00ec 1360     		str	r3, [r2]
 173              	.L3:
 174              		.loc 1 37 0
 175 00ee 9620     		mov	r0, #150
 176 00f0 4000     		lsl	r0, r0, #1
 177 00f2 C019     		add	r0, r0, r7
 178 00f4 0368     		ldr	r3, [r0]
 179 00f6 7F2B     		cmp	r3, #127
 180 00f8 DBDD     		ble	.L4
  38:../sources/main.c **** 						sample++;
 181              		.loc 1 38 0 is_stmt 1
 182 00fa 9821     		mov	r1, #152
 183 00fc 4900     		lsl	r1, r1, #1
 184 00fe C919     		add	r1, r1, r7
 185 0100 0B68     		ldr	r3, [r1]
 186 0102 0133     		add	r3, r3, #1
 187 0104 9822     		mov	r2, #152
 188 0106 5200     		lsl	r2, r2, #1
 189 0108 D219     		add	r2, r2, r7
 190 010a 1360     		str	r3, [r2]
 191              	.L2:
 192              	.LBE3:
  34:../sources/main.c **** 				for(;sample<3;){
 193              		.loc 1 34 0
 194 010c 9820     		mov	r0, #152
 195 010e 4000     		lsl	r0, r0, #1
 196 0110 C019     		add	r0, r0, r7
 197 0112 0368     		ldr	r3, [r0]
 198 0114 022B     		cmp	r3, #2
 199 0116 C1DD     		ble	.L5
  39:../sources/main.c **** 					}
  40:../sources/main.c **** 					
  41:../sources/main.c **** 				}
  42:../sources/main.c **** 									
  43:../sources/main.c **** 				
  44:../sources/main.c **** 			int L1, L2, R1, R2;				
  45:../sources/main.c **** 				for(;ii<=50; ii++){
 200              		.loc 1 45 0
 201 0118 4AE2     		b	.L6
 202              	.L26:
  46:../sources/main.c **** 					L1 = WorkingImage[63-ii];
 203              		.loc 1 46 0
 204 011a 9E21     		mov	r1, #158
 205 011c 4900     		lsl	r1, r1, #1
 206 011e C919     		add	r1, r1, r7
 207 0120 0B68     		ldr	r3, [r1]
 208 0122 3F22     		mov	r2, #63
 209 0124 D21A     		sub	r2, r2, r3
 210 0126 894B     		ldr	r3, .L28+8
 211 0128 A020     		mov	r0, #160
 212 012a 4000     		lsl	r0, r0, #1
 213 012c C019     		add	r0, r0, r7
 214 012e C318     		add	r3, r0, r3
 215 0130 5200     		lsl	r2, r2, #1
 216 0132 D35A     		ldrh	r3, [r2, r3]
 217 0134 8C21     		mov	r1, #140
 218 0136 4900     		lsl	r1, r1, #1
 219 0138 C919     		add	r1, r1, r7
 220 013a 0B60     		str	r3, [r1]
  47:../sources/main.c **** 					L2 = WorkingImage[62-ii];
 221              		.loc 1 47 0
 222 013c 9E22     		mov	r2, #158
 223 013e 5200     		lsl	r2, r2, #1
 224 0140 D219     		add	r2, r2, r7
 225 0142 1368     		ldr	r3, [r2]
 226 0144 3E22     		mov	r2, #62
 227 0146 D21A     		sub	r2, r2, r3
 228 0148 804B     		ldr	r3, .L28+8
 229 014a A020     		mov	r0, #160
 230 014c 4000     		lsl	r0, r0, #1
 231 014e C019     		add	r0, r0, r7
 232 0150 C318     		add	r3, r0, r3
 233 0152 5200     		lsl	r2, r2, #1
 234 0154 D35A     		ldrh	r3, [r2, r3]
 235 0156 8A21     		mov	r1, #138
 236 0158 4900     		lsl	r1, r1, #1
 237 015a C919     		add	r1, r1, r7
 238 015c 0B60     		str	r3, [r1]
  48:../sources/main.c **** 					R1 = WorkingImage[63+ii];
 239              		.loc 1 48 0
 240 015e 9E22     		mov	r2, #158
 241 0160 5200     		lsl	r2, r2, #1
 242 0162 D219     		add	r2, r2, r7
 243 0164 1368     		ldr	r3, [r2]
 244 0166 1A1C     		mov	r2, r3
 245 0168 3F32     		add	r2, r2, #63
 246 016a 784B     		ldr	r3, .L28+8
 247 016c A020     		mov	r0, #160
 248 016e 4000     		lsl	r0, r0, #1
 249 0170 C019     		add	r0, r0, r7
 250 0172 C318     		add	r3, r0, r3
 251 0174 5200     		lsl	r2, r2, #1
 252 0176 D35A     		ldrh	r3, [r2, r3]
 253 0178 8821     		mov	r1, #136
 254 017a 4900     		lsl	r1, r1, #1
 255 017c C919     		add	r1, r1, r7
 256 017e 0B60     		str	r3, [r1]
  49:../sources/main.c **** 					R2 = WorkingImage[64+ii];
 257              		.loc 1 49 0
 258 0180 9E22     		mov	r2, #158
 259 0182 5200     		lsl	r2, r2, #1
 260 0184 D219     		add	r2, r2, r7
 261 0186 1368     		ldr	r3, [r2]
 262 0188 1A1C     		mov	r2, r3
 263 018a 4032     		add	r2, r2, #64
 264 018c 6F4B     		ldr	r3, .L28+8
 265 018e A020     		mov	r0, #160
 266 0190 4000     		lsl	r0, r0, #1
 267 0192 C019     		add	r0, r0, r7
 268 0194 C318     		add	r3, r0, r3
 269 0196 5200     		lsl	r2, r2, #1
 270 0198 D35A     		ldrh	r3, [r2, r3]
 271 019a 8621     		mov	r1, #134
 272 019c 4900     		lsl	r1, r1, #1
 273 019e C919     		add	r1, r1, r7
 274 01a0 0B60     		str	r3, [r1]
  50:../sources/main.c **** 					deltaL = WorkingImage[63-ii] - WorkingImage[62-ii];
 275              		.loc 1 50 0
 276 01a2 9E22     		mov	r2, #158
 277 01a4 5200     		lsl	r2, r2, #1
 278 01a6 D219     		add	r2, r2, r7
 279 01a8 1368     		ldr	r3, [r2]
 280 01aa 3F22     		mov	r2, #63
 281 01ac D21A     		sub	r2, r2, r3
 282 01ae 674B     		ldr	r3, .L28+8
 283 01b0 A020     		mov	r0, #160
 284 01b2 4000     		lsl	r0, r0, #1
 285 01b4 C019     		add	r0, r0, r7
 286 01b6 C318     		add	r3, r0, r3
 287 01b8 5200     		lsl	r2, r2, #1
 288 01ba D35A     		ldrh	r3, [r2, r3]
 289 01bc 1A1C     		mov	r2, r3
 290 01be 9E21     		mov	r1, #158
 291 01c0 4900     		lsl	r1, r1, #1
 292 01c2 C919     		add	r1, r1, r7
 293 01c4 0B68     		ldr	r3, [r1]
 294 01c6 3E21     		mov	r1, #62
 295 01c8 C91A     		sub	r1, r1, r3
 296 01ca 604B     		ldr	r3, .L28+8
 297 01cc A020     		mov	r0, #160
 298 01ce 4000     		lsl	r0, r0, #1
 299 01d0 C019     		add	r0, r0, r7
 300 01d2 C318     		add	r3, r0, r3
 301 01d4 4900     		lsl	r1, r1, #1
 302 01d6 CB5A     		ldrh	r3, [r1, r3]
 303 01d8 D31A     		sub	r3, r2, r3
 304 01da 9C21     		mov	r1, #156
 305 01dc 4900     		lsl	r1, r1, #1
 306 01de C919     		add	r1, r1, r7
 307 01e0 0B60     		str	r3, [r1]
  51:../sources/main.c **** 					deltaR = WorkingImage[63+ii] - WorkingImage[64+ii];
 308              		.loc 1 51 0
 309 01e2 9E22     		mov	r2, #158
 310 01e4 5200     		lsl	r2, r2, #1
 311 01e6 D219     		add	r2, r2, r7
 312 01e8 1368     		ldr	r3, [r2]
 313 01ea 1A1C     		mov	r2, r3
 314 01ec 3F32     		add	r2, r2, #63
 315 01ee 574B     		ldr	r3, .L28+8
 316 01f0 A020     		mov	r0, #160
 317 01f2 4000     		lsl	r0, r0, #1
 318 01f4 C019     		add	r0, r0, r7
 319 01f6 C318     		add	r3, r0, r3
 320 01f8 5200     		lsl	r2, r2, #1
 321 01fa D35A     		ldrh	r3, [r2, r3]
 322 01fc 1A1C     		mov	r2, r3
 323 01fe 9E21     		mov	r1, #158
 324 0200 4900     		lsl	r1, r1, #1
 325 0202 C919     		add	r1, r1, r7
 326 0204 0B68     		ldr	r3, [r1]
 327 0206 191C     		mov	r1, r3
 328 0208 4031     		add	r1, r1, #64
 329 020a 504B     		ldr	r3, .L28+8
 330 020c A020     		mov	r0, #160
 331 020e 4000     		lsl	r0, r0, #1
 332 0210 C019     		add	r0, r0, r7
 333 0212 C318     		add	r3, r0, r3
 334 0214 4900     		lsl	r1, r1, #1
 335 0216 CB5A     		ldrh	r3, [r1, r3]
 336 0218 D31A     		sub	r3, r2, r3
 337 021a 9A21     		mov	r1, #154
 338 021c 4900     		lsl	r1, r1, #1
 339 021e C919     		add	r1, r1, r7
 340 0220 0B60     		str	r3, [r1]
  52:../sources/main.c **** 					
  53:../sources/main.c **** 					if(deltaL<-threshold||deltaR<-threshold){
 341              		.loc 1 53 0
 342 0222 9022     		mov	r2, #144
 343 0224 5200     		lsl	r2, r2, #1
 344 0226 D219     		add	r2, r2, r7
 345 0228 1368     		ldr	r3, [r2]
 346 022a 5A42     		neg	r2, r3
 347 022c 9C20     		mov	r0, #156
 348 022e 4000     		lsl	r0, r0, #1
 349 0230 C019     		add	r0, r0, r7
 350 0232 0368     		ldr	r3, [r0]
 351 0234 9A42     		cmp	r2, r3
 352 0236 0ADC     		bgt	.L7
 353              		.loc 1 53 0 is_stmt 0
 354 0238 9021     		mov	r1, #144
 355 023a 4900     		lsl	r1, r1, #1
 356 023c C919     		add	r1, r1, r7
 357 023e 0B68     		ldr	r3, [r1]
 358 0240 5A42     		neg	r2, r3
 359 0242 9A20     		mov	r0, #154
 360 0244 4000     		lsl	r0, r0, #1
 361 0246 C019     		add	r0, r0, r7
 362 0248 0368     		ldr	r3, [r0]
 363 024a 9A42     		cmp	r2, r3
 364 024c 07DD     		ble	.L8
 365              	.L7:
  54:../sources/main.c **** 						//car continues straight(may want to adjust this later to be more accurate)
  55:../sources/main.c **** 						steeringAngle = 0;
 366              		.loc 1 55 0 is_stmt 1
 367 024e 0023     		mov	r3, #0
 368 0250 791C     		add	r1, r7, #1
 369 0252 FF31     		add	r1, r1, #255
 370 0254 0B60     		str	r3, [r1]
  56:../sources/main.c **** 						TFC_SetServoLookup(0);// straight line to servos
 371              		.loc 1 56 0
 372 0256 0020     		mov	r0, #0
 373 0258 FFF7FEFF 		bl	TFC_SetServoLookup
  57:../sources/main.c **** 						break;
 374              		.loc 1 57 0
 375 025c AFE1     		b	.L9
 376              	.L8:
  58:../sources/main.c **** 					}
  59:../sources/main.c **** 					//where first derivative drop found on leftside
  60:../sources/main.c **** 					
  61:../sources/main.c **** 					if(deltaL>threshold&&(WorkingImage[62-ii] - WorkingImage[61-ii])>threshold){
 377              		.loc 1 61 0
 378 025e 9C23     		mov	r3, #156
 379 0260 5B00     		lsl	r3, r3, #1
 380 0262 DB19     		add	r3, r3, r7
 381 0264 1A68     		ldr	r2, [r3]
 382 0266 9020     		mov	r0, #144
 383 0268 4000     		lsl	r0, r0, #1
 384 026a C019     		add	r0, r0, r7
 385 026c 0368     		ldr	r3, [r0]
 386 026e 9A42     		cmp	r2, r3
 387 0270 00DC     		bgt	.LCB340
 388 0272 CAE0     		b	.L10	@long jump
 389              	.LCB340:
 390              		.loc 1 61 0 is_stmt 0
 391 0274 9E21     		mov	r1, #158
 392 0276 4900     		lsl	r1, r1, #1
 393 0278 C919     		add	r1, r1, r7
 394 027a 0B68     		ldr	r3, [r1]
 395 027c 3E22     		mov	r2, #62
 396 027e D21A     		sub	r2, r2, r3
 397 0280 324B     		ldr	r3, .L28+8
 398 0282 A020     		mov	r0, #160
 399 0284 4000     		lsl	r0, r0, #1
 400 0286 C019     		add	r0, r0, r7
 401 0288 C318     		add	r3, r0, r3
 402 028a 5200     		lsl	r2, r2, #1
 403 028c D35A     		ldrh	r3, [r2, r3]
 404 028e 1A1C     		mov	r2, r3
 405 0290 9E21     		mov	r1, #158
 406 0292 4900     		lsl	r1, r1, #1
 407 0294 C919     		add	r1, r1, r7
 408 0296 0B68     		ldr	r3, [r1]
 409 0298 3D21     		mov	r1, #61
 410 029a C91A     		sub	r1, r1, r3
 411 029c 2B4B     		ldr	r3, .L28+8
 412 029e A020     		mov	r0, #160
 413 02a0 4000     		lsl	r0, r0, #1
 414 02a2 C019     		add	r0, r0, r7
 415 02a4 C318     		add	r3, r0, r3
 416 02a6 4900     		lsl	r1, r1, #1
 417 02a8 CB5A     		ldrh	r3, [r1, r3]
 418 02aa D21A     		sub	r2, r2, r3
 419 02ac 9021     		mov	r1, #144
 420 02ae 4900     		lsl	r1, r1, #1
 421 02b0 C919     		add	r1, r1, r7
 422 02b2 0B68     		ldr	r3, [r1]
 423 02b4 9A42     		cmp	r2, r3
 424 02b6 00DC     		bgt	.LCB374
 425 02b8 A7E0     		b	.L10	@long jump
 426              	.LCB374:
  62:../sources/main.c **** 						//may need to change 3 should be lower than first thresh holdslope
  63:../sources/main.c **** 						while(deltaL>smallthreshold&&ii<=50){
 427              		.loc 1 63 0 is_stmt 1
 428 02ba 28E0     		b	.L11
 429              	.L13:
  64:../sources/main.c **** 							ii++;
 430              		.loc 1 64 0
 431 02bc 9E22     		mov	r2, #158
 432 02be 5200     		lsl	r2, r2, #1
 433 02c0 D219     		add	r2, r2, r7
 434 02c2 1368     		ldr	r3, [r2]
 435 02c4 0133     		add	r3, r3, #1
 436 02c6 9E20     		mov	r0, #158
 437 02c8 4000     		lsl	r0, r0, #1
 438 02ca C019     		add	r0, r0, r7
 439 02cc 0360     		str	r3, [r0]
  65:../sources/main.c **** 							deltaL = WorkingImage[63-ii] - WorkingImage[62-ii];
 440              		.loc 1 65 0
 441 02ce 9E21     		mov	r1, #158
 442 02d0 4900     		lsl	r1, r1, #1
 443 02d2 C919     		add	r1, r1, r7
 444 02d4 0B68     		ldr	r3, [r1]
 445 02d6 3F22     		mov	r2, #63
 446 02d8 D21A     		sub	r2, r2, r3
 447 02da 1C4B     		ldr	r3, .L28+8
 448 02dc A020     		mov	r0, #160
 449 02de 4000     		lsl	r0, r0, #1
 450 02e0 C019     		add	r0, r0, r7
 451 02e2 C318     		add	r3, r0, r3
 452 02e4 5200     		lsl	r2, r2, #1
 453 02e6 D35A     		ldrh	r3, [r2, r3]
 454 02e8 1A1C     		mov	r2, r3
 455 02ea 9E21     		mov	r1, #158
 456 02ec 4900     		lsl	r1, r1, #1
 457 02ee C919     		add	r1, r1, r7
 458 02f0 0B68     		ldr	r3, [r1]
 459 02f2 3E21     		mov	r1, #62
 460 02f4 C91A     		sub	r1, r1, r3
 461 02f6 154B     		ldr	r3, .L28+8
 462 02f8 A020     		mov	r0, #160
 463 02fa 4000     		lsl	r0, r0, #1
 464 02fc C019     		add	r0, r0, r7
 465 02fe C318     		add	r3, r0, r3
 466 0300 4900     		lsl	r1, r1, #1
 467 0302 CB5A     		ldrh	r3, [r1, r3]
 468 0304 D31A     		sub	r3, r2, r3
 469 0306 9C21     		mov	r1, #156
 470 0308 4900     		lsl	r1, r1, #1
 471 030a C919     		add	r1, r1, r7
 472 030c 0B60     		str	r3, [r1]
 473              	.L11:
  63:../sources/main.c **** 						while(deltaL>smallthreshold&&ii<=50){
 474              		.loc 1 63 0
 475 030e 9C23     		mov	r3, #156
 476 0310 5B00     		lsl	r3, r3, #1
 477 0312 DB19     		add	r3, r3, r7
 478 0314 1A68     		ldr	r2, [r3]
 479 0316 8E20     		mov	r0, #142
 480 0318 4000     		lsl	r0, r0, #1
 481 031a C019     		add	r0, r0, r7
 482 031c 0368     		ldr	r3, [r0]
 483 031e 9A42     		cmp	r2, r3
 484 0320 05DD     		ble	.L12
  63:../sources/main.c **** 						while(deltaL>smallthreshold&&ii<=50){
 485              		.loc 1 63 0 is_stmt 0
 486 0322 9E21     		mov	r1, #158
 487 0324 4900     		lsl	r1, r1, #1
 488 0326 C919     		add	r1, r1, r7
 489 0328 0B68     		ldr	r3, [r1]
 490 032a 322B     		cmp	r3, #50
 491 032c C6DD     		ble	.L13
 492              	.L12:
  66:../sources/main.c **** 						}
  67:../sources/main.c **** 						firstLevel = 63 - ii;
 493              		.loc 1 67 0 is_stmt 1
 494 032e 9E22     		mov	r2, #158
 495 0330 5200     		lsl	r2, r2, #1
 496 0332 D219     		add	r2, r2, r7
 497 0334 1368     		ldr	r3, [r2]
 498 0336 3F22     		mov	r2, #63
 499 0338 D31A     		sub	r3, r2, r3
 500 033a 8420     		mov	r0, #132
 501 033c 4000     		lsl	r0, r0, #1
 502 033e C019     		add	r0, r0, r7
 503 0340 0360     		str	r3, [r0]
  68:../sources/main.c **** 						while(deltaL<smallthreshold&&i<=50){
 504              		.loc 1 68 0
 505 0342 32E0     		b	.L14
 506              	.L29:
 507              		.align	2
 508              	.L28:
 509 0344 00F10F40 		.word	1074786560
 510 0348 CDCC4C3E 		.word	1045220557
 511 034c C0FEFFFF 		.word	-320
 512 0350 00000000 		.word	LineScanImageReady
 513 0354 00000000 		.word	LineScanImage0
 514              	.L16:
  69:../sources/main.c **** 							ii++;
 515              		.loc 1 69 0
 516 0358 9E21     		mov	r1, #158
 517 035a 4900     		lsl	r1, r1, #1
 518 035c C919     		add	r1, r1, r7
 519 035e 0B68     		ldr	r3, [r1]
 520 0360 0133     		add	r3, r3, #1
 521 0362 9E22     		mov	r2, #158
 522 0364 5200     		lsl	r2, r2, #1
 523 0366 D219     		add	r2, r2, r7
 524 0368 1360     		str	r3, [r2]
  70:../sources/main.c **** 							deltaL = WorkingImage[63-ii] - WorkingImage[62-ii];
 525              		.loc 1 70 0
 526 036a 9E20     		mov	r0, #158
 527 036c 4000     		lsl	r0, r0, #1
 528 036e C019     		add	r0, r0, r7
 529 0370 0368     		ldr	r3, [r0]
 530 0372 3F22     		mov	r2, #63
 531 0374 D21A     		sub	r2, r2, r3
 532 0376 974B     		ldr	r3, .L30
 533 0378 A021     		mov	r1, #160
 534 037a 4900     		lsl	r1, r1, #1
 535 037c C919     		add	r1, r1, r7
 536 037e CB18     		add	r3, r1, r3
 537 0380 5200     		lsl	r2, r2, #1
 538 0382 D35A     		ldrh	r3, [r2, r3]
 539 0384 1A1C     		mov	r2, r3
 540 0386 9E20     		mov	r0, #158
 541 0388 4000     		lsl	r0, r0, #1
 542 038a C019     		add	r0, r0, r7
 543 038c 0368     		ldr	r3, [r0]
 544 038e 3E21     		mov	r1, #62
 545 0390 C91A     		sub	r1, r1, r3
 546 0392 904B     		ldr	r3, .L30
 547 0394 A020     		mov	r0, #160
 548 0396 4000     		lsl	r0, r0, #1
 549 0398 C019     		add	r0, r0, r7
 550 039a C318     		add	r3, r0, r3
 551 039c 4900     		lsl	r1, r1, #1
 552 039e CB5A     		ldrh	r3, [r1, r3]
 553 03a0 D31A     		sub	r3, r2, r3
 554 03a2 9C21     		mov	r1, #156
 555 03a4 4900     		lsl	r1, r1, #1
 556 03a6 C919     		add	r1, r1, r7
 557 03a8 0B60     		str	r3, [r1]
 558              	.L14:
  68:../sources/main.c **** 						while(deltaL<smallthreshold&&i<=50){
 559              		.loc 1 68 0
 560 03aa 9C23     		mov	r3, #156
 561 03ac 5B00     		lsl	r3, r3, #1
 562 03ae DB19     		add	r3, r3, r7
 563 03b0 1A68     		ldr	r2, [r3]
 564 03b2 8E20     		mov	r0, #142
 565 03b4 4000     		lsl	r0, r0, #1
 566 03b6 C019     		add	r0, r0, r7
 567 03b8 0368     		ldr	r3, [r0]
 568 03ba 9A42     		cmp	r2, r3
 569 03bc 05DA     		bge	.L15
  68:../sources/main.c **** 						while(deltaL<smallthreshold&&i<=50){
 570              		.loc 1 68 0 is_stmt 0
 571 03be 9421     		mov	r1, #148
 572 03c0 4900     		lsl	r1, r1, #1
 573 03c2 C919     		add	r1, r1, r7
 574 03c4 0B68     		ldr	r3, [r1]
 575 03c6 322B     		cmp	r3, #50
 576 03c8 C6D9     		bls	.L16
 577              	.L15:
  71:../sources/main.c **** 						}
  72:../sources/main.c **** 						secondLevel = 63 - ii;
 578              		.loc 1 72 0 is_stmt 1
 579 03ca 9E22     		mov	r2, #158
 580 03cc 5200     		lsl	r2, r2, #1
 581 03ce D219     		add	r2, r2, r7
 582 03d0 1368     		ldr	r3, [r2]
 583 03d2 3F22     		mov	r2, #63
 584 03d4 D31A     		sub	r3, r2, r3
 585 03d6 781D     		add	r0, r7, #5
 586 03d8 FF30     		add	r0, r0, #255
 587 03da 0360     		str	r3, [r0]
  73:../sources/main.c **** 						steeringAngle = (firstLevel + secondLevel)/2; 
 588              		.loc 1 73 0
 589 03dc 8421     		mov	r1, #132
 590 03de 4900     		lsl	r1, r1, #1
 591 03e0 C919     		add	r1, r1, r7
 592 03e2 0A68     		ldr	r2, [r1]
 593 03e4 781D     		add	r0, r7, #5
 594 03e6 FF30     		add	r0, r0, #255
 595 03e8 0368     		ldr	r3, [r0]
 596 03ea D318     		add	r3, r2, r3
 597 03ec 002B     		cmp	r3, #0
 598 03ee 00DA     		bge	.L17
 599 03f0 0133     		add	r3, r3, #1
 600              	.L17:
 601 03f2 5B10     		asr	r3, r3, #1
 602 03f4 791C     		add	r1, r7, #1
 603 03f6 FF31     		add	r1, r1, #255
 604 03f8 0B60     		str	r3, [r1]
  74:../sources/main.c **** 						TFC_SetServoLookup(steeringAngle-50);
 605              		.loc 1 74 0
 606 03fa 7A1C     		add	r2, r7, #1
 607 03fc FF32     		add	r2, r2, #255
 608 03fe 1368     		ldr	r3, [r2]
 609 0400 323B     		sub	r3, r3, #50
 610 0402 181C     		mov	r0, r3
 611 0404 FFF7FEFF 		bl	TFC_SetServoLookup
  75:../sources/main.c **** 						break;//don't check right side
 612              		.loc 1 75 0
 613 0408 D9E0     		b	.L9
 614              	.L10:
  76:../sources/main.c **** 					
  77:../sources/main.c **** 					}
  78:../sources/main.c **** 					if(deltaR>threshold&&(WorkingImage[64+ii] - WorkingImage[65+ii])>threshold){
 615              		.loc 1 78 0
 616 040a 9A23     		mov	r3, #154
 617 040c 5B00     		lsl	r3, r3, #1
 618 040e DB19     		add	r3, r3, r7
 619 0410 1A68     		ldr	r2, [r3]
 620 0412 9020     		mov	r0, #144
 621 0414 4000     		lsl	r0, r0, #1
 622 0416 C019     		add	r0, r0, r7
 623 0418 0368     		ldr	r3, [r0]
 624 041a 9A42     		cmp	r2, r3
 625 041c 00DC     		bgt	.LCB568
 626 041e BEE0     		b	.L18	@long jump
 627              	.LCB568:
 628              		.loc 1 78 0 is_stmt 0
 629 0420 9E21     		mov	r1, #158
 630 0422 4900     		lsl	r1, r1, #1
 631 0424 C919     		add	r1, r1, r7
 632 0426 0B68     		ldr	r3, [r1]
 633 0428 1A1C     		mov	r2, r3
 634 042a 4032     		add	r2, r2, #64
 635 042c 694B     		ldr	r3, .L30
 636 042e A020     		mov	r0, #160
 637 0430 4000     		lsl	r0, r0, #1
 638 0432 C019     		add	r0, r0, r7
 639 0434 C318     		add	r3, r0, r3
 640 0436 5200     		lsl	r2, r2, #1
 641 0438 D35A     		ldrh	r3, [r2, r3]
 642 043a 1A1C     		mov	r2, r3
 643 043c 9E21     		mov	r1, #158
 644 043e 4900     		lsl	r1, r1, #1
 645 0440 C919     		add	r1, r1, r7
 646 0442 0B68     		ldr	r3, [r1]
 647 0444 191C     		mov	r1, r3
 648 0446 4131     		add	r1, r1, #65
 649 0448 624B     		ldr	r3, .L30
 650 044a A020     		mov	r0, #160
 651 044c 4000     		lsl	r0, r0, #1
 652 044e C019     		add	r0, r0, r7
 653 0450 C318     		add	r3, r0, r3
 654 0452 4900     		lsl	r1, r1, #1
 655 0454 CB5A     		ldrh	r3, [r1, r3]
 656 0456 D21A     		sub	r2, r2, r3
 657 0458 9021     		mov	r1, #144
 658 045a 4900     		lsl	r1, r1, #1
 659 045c C919     		add	r1, r1, r7
 660 045e 0B68     		ldr	r3, [r1]
 661 0460 9A42     		cmp	r2, r3
 662 0462 00DC     		bgt	.LCB602
 663 0464 9BE0     		b	.L18	@long jump
 664              	.LCB602:
  79:../sources/main.c **** 					//may need to change 3 should be lower than first thresh holdslope
  80:../sources/main.c **** 						while(deltaR>smallthreshold&&ii<=50){
 665              		.loc 1 80 0 is_stmt 1
 666 0466 28E0     		b	.L19
 667              	.L21:
  81:../sources/main.c **** 							ii++;
 668              		.loc 1 81 0
 669 0468 9E22     		mov	r2, #158
 670 046a 5200     		lsl	r2, r2, #1
 671 046c D219     		add	r2, r2, r7
 672 046e 1368     		ldr	r3, [r2]
 673 0470 0133     		add	r3, r3, #1
 674 0472 9E20     		mov	r0, #158
 675 0474 4000     		lsl	r0, r0, #1
 676 0476 C019     		add	r0, r0, r7
 677 0478 0360     		str	r3, [r0]
  82:../sources/main.c **** 							deltaR = WorkingImage[64+ii] - WorkingImage[65+ii];
 678              		.loc 1 82 0
 679 047a 9E21     		mov	r1, #158
 680 047c 4900     		lsl	r1, r1, #1
 681 047e C919     		add	r1, r1, r7
 682 0480 0B68     		ldr	r3, [r1]
 683 0482 1A1C     		mov	r2, r3
 684 0484 4032     		add	r2, r2, #64
 685 0486 534B     		ldr	r3, .L30
 686 0488 A020     		mov	r0, #160
 687 048a 4000     		lsl	r0, r0, #1
 688 048c C019     		add	r0, r0, r7
 689 048e C318     		add	r3, r0, r3
 690 0490 5200     		lsl	r2, r2, #1
 691 0492 D35A     		ldrh	r3, [r2, r3]
 692 0494 1A1C     		mov	r2, r3
 693 0496 9E21     		mov	r1, #158
 694 0498 4900     		lsl	r1, r1, #1
 695 049a C919     		add	r1, r1, r7
 696 049c 0B68     		ldr	r3, [r1]
 697 049e 191C     		mov	r1, r3
 698 04a0 4131     		add	r1, r1, #65
 699 04a2 4C4B     		ldr	r3, .L30
 700 04a4 A020     		mov	r0, #160
 701 04a6 4000     		lsl	r0, r0, #1
 702 04a8 C019     		add	r0, r0, r7
 703 04aa C318     		add	r3, r0, r3
 704 04ac 4900     		lsl	r1, r1, #1
 705 04ae CB5A     		ldrh	r3, [r1, r3]
 706 04b0 D31A     		sub	r3, r2, r3
 707 04b2 9A21     		mov	r1, #154
 708 04b4 4900     		lsl	r1, r1, #1
 709 04b6 C919     		add	r1, r1, r7
 710 04b8 0B60     		str	r3, [r1]
 711              	.L19:
  80:../sources/main.c **** 						while(deltaR>smallthreshold&&ii<=50){
 712              		.loc 1 80 0
 713 04ba 9A23     		mov	r3, #154
 714 04bc 5B00     		lsl	r3, r3, #1
 715 04be DB19     		add	r3, r3, r7
 716 04c0 1A68     		ldr	r2, [r3]
 717 04c2 8E20     		mov	r0, #142
 718 04c4 4000     		lsl	r0, r0, #1
 719 04c6 C019     		add	r0, r0, r7
 720 04c8 0368     		ldr	r3, [r0]
 721 04ca 9A42     		cmp	r2, r3
 722 04cc 05DD     		ble	.L20
  80:../sources/main.c **** 						while(deltaR>smallthreshold&&ii<=50){
 723              		.loc 1 80 0 is_stmt 0
 724 04ce 9E21     		mov	r1, #158
 725 04d0 4900     		lsl	r1, r1, #1
 726 04d2 C919     		add	r1, r1, r7
 727 04d4 0B68     		ldr	r3, [r1]
 728 04d6 322B     		cmp	r3, #50
 729 04d8 C6DD     		ble	.L21
 730              	.L20:
  83:../sources/main.c **** 						}
  84:../sources/main.c **** 						firstLevel = 64 + ii;
 731              		.loc 1 84 0 is_stmt 1
 732 04da 9E22     		mov	r2, #158
 733 04dc 5200     		lsl	r2, r2, #1
 734 04de D219     		add	r2, r2, r7
 735 04e0 1368     		ldr	r3, [r2]
 736 04e2 4033     		add	r3, r3, #64
 737 04e4 8420     		mov	r0, #132
 738 04e6 4000     		lsl	r0, r0, #1
 739 04e8 C019     		add	r0, r0, r7
 740 04ea 0360     		str	r3, [r0]
  85:../sources/main.c **** 						while(deltaL<smallthreshold&&ii<=50){
 741              		.loc 1 85 0
 742 04ec 28E0     		b	.L22
 743              	.L24:
  86:../sources/main.c **** 							ii++;
 744              		.loc 1 86 0
 745 04ee 9E21     		mov	r1, #158
 746 04f0 4900     		lsl	r1, r1, #1
 747 04f2 C919     		add	r1, r1, r7
 748 04f4 0B68     		ldr	r3, [r1]
 749 04f6 0133     		add	r3, r3, #1
 750 04f8 9E22     		mov	r2, #158
 751 04fa 5200     		lsl	r2, r2, #1
 752 04fc D219     		add	r2, r2, r7
 753 04fe 1360     		str	r3, [r2]
  87:../sources/main.c **** 							deltaR = WorkingImage[64+ii] - WorkingImage[65+ii];
 754              		.loc 1 87 0
 755 0500 9E20     		mov	r0, #158
 756 0502 4000     		lsl	r0, r0, #1
 757 0504 C019     		add	r0, r0, r7
 758 0506 0368     		ldr	r3, [r0]
 759 0508 1A1C     		mov	r2, r3
 760 050a 4032     		add	r2, r2, #64
 761 050c 314B     		ldr	r3, .L30
 762 050e A021     		mov	r1, #160
 763 0510 4900     		lsl	r1, r1, #1
 764 0512 C919     		add	r1, r1, r7
 765 0514 CB18     		add	r3, r1, r3
 766 0516 5200     		lsl	r2, r2, #1
 767 0518 D35A     		ldrh	r3, [r2, r3]
 768 051a 1A1C     		mov	r2, r3
 769 051c 9E20     		mov	r0, #158
 770 051e 4000     		lsl	r0, r0, #1
 771 0520 C019     		add	r0, r0, r7
 772 0522 0368     		ldr	r3, [r0]
 773 0524 191C     		mov	r1, r3
 774 0526 4131     		add	r1, r1, #65
 775 0528 2A4B     		ldr	r3, .L30
 776 052a A020     		mov	r0, #160
 777 052c 4000     		lsl	r0, r0, #1
 778 052e C019     		add	r0, r0, r7
 779 0530 C318     		add	r3, r0, r3
 780 0532 4900     		lsl	r1, r1, #1
 781 0534 CB5A     		ldrh	r3, [r1, r3]
 782 0536 D31A     		sub	r3, r2, r3
 783 0538 9A21     		mov	r1, #154
 784 053a 4900     		lsl	r1, r1, #1
 785 053c C919     		add	r1, r1, r7
 786 053e 0B60     		str	r3, [r1]
 787              	.L22:
  85:../sources/main.c **** 						while(deltaL<smallthreshold&&ii<=50){
 788              		.loc 1 85 0
 789 0540 9C23     		mov	r3, #156
 790 0542 5B00     		lsl	r3, r3, #1
 791 0544 DB19     		add	r3, r3, r7
 792 0546 1A68     		ldr	r2, [r3]
 793 0548 8E20     		mov	r0, #142
 794 054a 4000     		lsl	r0, r0, #1
 795 054c C019     		add	r0, r0, r7
 796 054e 0368     		ldr	r3, [r0]
 797 0550 9A42     		cmp	r2, r3
 798 0552 05DA     		bge	.L23
  85:../sources/main.c **** 						while(deltaL<smallthreshold&&ii<=50){
 799              		.loc 1 85 0 is_stmt 0
 800 0554 9E21     		mov	r1, #158
 801 0556 4900     		lsl	r1, r1, #1
 802 0558 C919     		add	r1, r1, r7
 803 055a 0B68     		ldr	r3, [r1]
 804 055c 322B     		cmp	r3, #50
 805 055e C6DD     		ble	.L24
 806              	.L23:
  88:../sources/main.c **** 						}
  89:../sources/main.c **** 							secondLevel = 64 + ii;
 807              		.loc 1 89 0 is_stmt 1
 808 0560 9E22     		mov	r2, #158
 809 0562 5200     		lsl	r2, r2, #1
 810 0564 D219     		add	r2, r2, r7
 811 0566 1368     		ldr	r3, [r2]
 812 0568 4033     		add	r3, r3, #64
 813 056a 781D     		add	r0, r7, #5
 814 056c FF30     		add	r0, r0, #255
 815 056e 0360     		str	r3, [r0]
  90:../sources/main.c **** 							steeringAngle = (firstLevel + secondLevel)/2; 
 816              		.loc 1 90 0
 817 0570 8421     		mov	r1, #132
 818 0572 4900     		lsl	r1, r1, #1
 819 0574 C919     		add	r1, r1, r7
 820 0576 0A68     		ldr	r2, [r1]
 821 0578 781D     		add	r0, r7, #5
 822 057a FF30     		add	r0, r0, #255
 823 057c 0368     		ldr	r3, [r0]
 824 057e D318     		add	r3, r2, r3
 825 0580 002B     		cmp	r3, #0
 826 0582 00DA     		bge	.L25
 827 0584 0133     		add	r3, r3, #1
 828              	.L25:
 829 0586 5B10     		asr	r3, r3, #1
 830 0588 791C     		add	r1, r7, #1
 831 058a FF31     		add	r1, r1, #255
 832 058c 0B60     		str	r3, [r1]
  91:../sources/main.c **** 							TFC_SetServoLookup(steeringAngle-50);
 833              		.loc 1 91 0
 834 058e 7A1C     		add	r2, r7, #1
 835 0590 FF32     		add	r2, r2, #255
 836 0592 1368     		ldr	r3, [r2]
 837 0594 323B     		sub	r3, r3, #50
 838 0596 181C     		mov	r0, r3
 839 0598 FFF7FEFF 		bl	TFC_SetServoLookup
  92:../sources/main.c **** 							break; //don't check anymore bits				
 840              		.loc 1 92 0
 841 059c 0FE0     		b	.L9
 842              	.L18:
  45:../sources/main.c **** 				for(;ii<=50; ii++){
 843              		.loc 1 45 0
 844 059e 9E20     		mov	r0, #158
 845 05a0 4000     		lsl	r0, r0, #1
 846 05a2 C019     		add	r0, r0, r7
 847 05a4 0368     		ldr	r3, [r0]
 848 05a6 0133     		add	r3, r3, #1
 849 05a8 9E21     		mov	r1, #158
 850 05aa 4900     		lsl	r1, r1, #1
 851 05ac C919     		add	r1, r1, r7
 852 05ae 0B60     		str	r3, [r1]
 853              	.L6:
  45:../sources/main.c **** 				for(;ii<=50; ii++){
 854              		.loc 1 45 0 is_stmt 0
 855 05b0 9E22     		mov	r2, #158
 856 05b2 5200     		lsl	r2, r2, #1
 857 05b4 D219     		add	r2, r2, r7
 858 05b6 1368     		ldr	r3, [r2]
 859 05b8 322B     		cmp	r3, #50
 860 05ba 00DC     		bgt	.LCB791
 861 05bc ADE5     		b	.L26	@long jump
 862              	.LCB791:
 863              	.L9:
  93:../sources/main.c **** 										
  94:../sources/main.c **** 						}
  95:../sources/main.c **** 				}
  96:../sources/main.c **** 				steeringAngle = 0;//if passes a horizontal line
 864              		.loc 1 96 0 is_stmt 1
 865 05be 0023     		mov	r3, #0
 866 05c0 781C     		add	r0, r7, #1
 867 05c2 FF30     		add	r0, r0, #255
 868 05c4 0360     		str	r3, [r0]
  97:../sources/main.c **** 				TFC_SetServoLookup(steeringAngle); // straight line to servos
 869              		.loc 1 97 0
 870 05c6 791C     		add	r1, r7, #1
 871 05c8 FF31     		add	r1, r1, #255
 872 05ca 0B68     		ldr	r3, [r1]
 873 05cc 181C     		mov	r0, r3
 874 05ce FFF7FEFF 		bl	TFC_SetServoLookup
 875              	.LBE2:
  98:../sources/main.c **** 				
  99:../sources/main.c **** 				
 100:../sources/main.c **** 				
 101:../sources/main.c **** 				
 102:../sources/main.c **** 				break;
 103:../sources/main.c **** 			}
 104:../sources/main.c **** 	}
 876              		.loc 1 104 0
 877 05d2 47E5     		b	.L27
 878              	.L31:
 879              		.align	2
 880              	.L30:
 881 05d4 C0FEFFFF 		.word	-320
 882              		.cfi_endproc
 883              	.LFE0:
 885              		.text
 886              	.Letext0:
 887              		.file 2 "C:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 888              		.file 3 "H:/git/freescale/Project_Headers/MKL25Z4.h"
 889              		.file 4 "H:/git/freescale/Project_Headers/TFC\\TFC_LineScanCamera.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\calla\AppData\Local\Temp\ccpYXgZY.s:18     .text.main:00000000 $t
C:\Users\calla\AppData\Local\Temp\ccpYXgZY.s:23     .text.main:00000000 main
C:\Users\calla\AppData\Local\Temp\ccpYXgZY.s:509    .text.main:00000344 $d
C:\Users\calla\AppData\Local\Temp\ccpYXgZY.s:516    .text.main:00000358 $t
C:\Users\calla\AppData\Local\Temp\ccpYXgZY.s:881    .text.main:000005d4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TFC_Init
TFC_SetMotorPWM
TFC_Task
TFC_GetDIP_Switch
memset
TFC_SetServoLookup
LineScanImageReady
LineScanImage0
